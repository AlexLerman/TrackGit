#!/usr/bin/env ruby

require 'pathname'
require "trollop"

# lib = (Pathname.new(__FILE__).realpath.dirname  + '../lib').to_s
# $LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)

require_relative '../lib/TrackGit'

track = TrackGit.new

all_arguments = ""
ARGV.each do |arg|
  if arg.include? " "
    all_arguments += " \"#{arg}\" "
  else
    all_arguments += " #{arg}"
  end
end

SUB_COMMANDS = %w(checkout createIssue commit delete getComments addComment login setTracker setRepo finish test up down push pull create config listIssues)

global_opts = Trollop::options do
  banner "magic file deleting and copying utility"
  # opt :dry_run, "Don't actually do anything", :short => "-n"
  stop_on SUB_COMMANDS
end

cmd = ARGV.shift # get the subcommand
cmd_opts = case cmd
when "checkout" # parse delete options
    Trollop::options do
      opt :test, "test"
    end
    track.checkoutIssue(ARGV[0])
  when "createIssue"  # parse copy options
    Trollop::options do
      opt :test, "test"
    end
    track.createIssue(ARGV)

  when "create"
    track.createIssue(ARGV)
  when "setup"
    track.setup
  when "delete"  # parse copy options
    track.deleteBranch(ARGV[0])
  when "commit"  # parse copy options
    track.commit(all_arguments)
  when "getComments"
    track.getComments
  when "addComment"
    track.addComment(ARGV[0])
  when "login"
    track.login(ARGV)
  when "setTracker"
    track.setTracker(ARGV[0])
  when "setRepo"
    track.setRepo(ARGV[0])
  when "finish"
    track.finish()
  when "listIssues"
    opts = Trollop::options do
      opt :mine, "mine", :short => "-m"
      opt :all, "all", :short => "-a"
      opt :creator, "creator", :short => "-c", :type => :string
      opt :mentioned, "mentioned", :type => :string
      opt :milestone, "milestone", :type => :integer
    end
    track.listIssues(opts)
  when "up"
    track.up
  when "down"
    track.down
  when "push"
    track.push
  when "pull"
    track.pull
  when "test"
    opts = Trollop::options do
      opt :test, "test", :type => :string
      opt :die, "Do or die", :short => "-d"
    end
  else
    puts "executing as git"
    system("git#{all_arguments}")
    # Trollop::die "unknown subcommand #{cmd.inspect}"
  end
