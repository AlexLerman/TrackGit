#!/usr/bin/env ruby

require 'pathname'
require "trollop"

# lib = (Pathname.new(__FILE__).realpath.dirname  + '../lib').to_s
# $LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)

require_relative '../lib/TrackGit'

track = TrackGit.new

all_arguments = ""
ARGV.each do |arg|
  if arg.include? " "
    all_arguments += " \"#{arg}\" "
  else
    all_arguments += " #{arg}"
  end
end

SUB_COMMANDS = %w(checkout createIssue commit delete getComments addComment login setTracker setRepo finish test up down push pull create config listIssues closeIssue)

global_opts = Trollop::options do
  banner <<-EOS
TrackGit integretes your issue tracker of choice with your git repo for easy commandline usage.
Usage:
       tg <commands> [options] [args]+

To start using TrackGit:
      setup                   Sets repository and user info
      setRepo                 Change repository
      setTracker              Change tracker
      login <username> <pass> Update login credentials

Tracker functions:
      listIssues              Lists all open issues. Can be filtered by:
                              --mine | -m
                              --creator | -c
                              --milestone
                              --mentioned
      closeIssue <issue id>   Close designated issue
                              --comment | -c Close with comment
      getComments             Gets all comments on current issue. Impractical for long chains
      addComment <comment>    Adds comment to current branch.

Integrated functions:
      createIssue <title>     Create an issue.
                              --branch | -b option for creating the branch as well
      checkout <issue id>     Checkout branch by issue number
      commit                  Adds issue number to commit message. See `git help commit` for more detail
      finish                  Merges current branch onto master, closes associated issue and pushes.

Convenience functions:
      up                      push equivalent
      down                    pull equivalent

All other git commands are executed as git commands.

EOS

  stop_on SUB_COMMANDS
end

cmd = ARGV.shift # get the subcommand
cmd_opts = case cmd
when "checkout" # parse delete options
    Trollop::options do
      opt :test, "test"
    end
    track.checkoutIssueByID(ARGV[0])
  when "createIssue"  # parse copy options
    opts = Trollop::options do
      opt :branch, "branch", :short => "-b"
    end
    track.createIssue(ARGV, opts)
  when "create"
    opts = Trollop::options do
      opt :branch, "branch", :short => "-b"
    end
    track.createIssue(ARGV, opts)
  when "setup"
    track.setup
  when "delete"  # parse copy options
    track.deleteBranch(ARGV[0])
  when "commit"  # parse copy options
    track.commit(all_arguments)
  when "getComments"
    track.getComments
  when "addComment"
    track.addComment(ARGV[0])
  when "login"
    track.login(ARGV)
  when "setTracker"
    track.setTracker(ARGV[0])
  when "setRepo"
    track.setRepo(ARGV[0])
  when "finish"
    track.finish()
  when "listIssues"
    opts = Trollop::options do
      opt :mine, "mine", :short => "-m"
      opt :all, "all", :short => "-a"
      opt :creator, "creator", :short => "-c", :type => :string
      opt :mentioned, "mentioned", :type => :string
      opt :milestone, "milestone", :type => :string
    end
    track.listIssues(opts)
  when "closeIssue"
    opts = Trollop::options do
      opt :comment, "comment", :short=> "-c", :type => :string
    end
    track.closeIssue(ARGV[0], opts.comment)
  when "up"
    track.up
  when "down"
    track.down
  when "push"
    track.push
  when "pull"
    track.pull
  when "test"
    opts = Trollop::options do
      opt :test, "test", :type => :string
      opt :die, "Do or die", :short => "-d"
    end
    print opts
  else
    puts "executing as git"
    system("git#{all_arguments}")
    # Trollop::die "unknown subcommand #{cmd.inspect}"
  end
